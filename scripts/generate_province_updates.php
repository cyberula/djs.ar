#!/usr/bin/env php
<?php
declare(strict_types=1);

// Generate an SQL file with UPDATE statements to normalize location_province values.
// Usage:
//   php scripts/generate_province_updates.php

require __DIR__ . '/../includes/helpers.php';
require __DIR__ . '/../includes/db.php';

$canonical = require __DIR__ . '/../includes/provinces.php';

function normalize_key(string $s): string
{
    $s = trim($s);
    $s = iconv('UTF-8', 'ASCII//TRANSLIT', $s) ?: $s;
    $s = mb_strtolower($s, 'UTF-8');
    $s = preg_replace('/[^a-z0-9 ]+/', ' ', $s);
    $s = preg_replace('/\s+/', ' ', $s);
    return trim((string)$s);
}

$map = [];
foreach ($canonical as $label) {
    $map[normalize_key($label)] = $label;
}

$aliases = [
    'caba' => 'Ciudad Autónoma de Buenos Aires',
    'capital federal' => 'Ciudad Autónoma de Buenos Aires',
    'bs as' => 'Buenos Aires',
    'bs as.' => 'Buenos Aires',
    'bsas' => 'Buenos Aires',
    'buenos aires province' => 'Buenos Aires',
    'provincia de buenos aires' => 'Buenos Aires',
    'tierra del fuego y antartida e islas del atl' => 'Tierra del Fuego',
    'tierra del fuego' => 'Tierra del Fuego',
    'rio negro' => 'Río Negro',
    'rioja' => 'La Rioja',
];
foreach ($aliases as $k => $v) {
    $map[normalize_key($k)] = $v;
}

$stmt = $pdo->prepare('SELECT id, location_province FROM djs WHERE location_province IS NOT NULL AND location_province <> ""');
$stmt->execute();
$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

if (empty($rows)) {
    echo "No rows with a non-empty location_province found.\n";
    exit(0);
}

$updates = [];
foreach ($rows as $row) {
    $id = (int)$row['id'];
    $orig = (string)$row['location_province'];
    $norm = normalize_key($orig);
    if ($norm === '') {
        continue;
    }
    if (isset($map[$norm])) {
        $to = $map[$norm];
        if ($to !== $orig) {
            $updates[] = ['id' => $id, 'from' => $orig, 'to' => $to];
        }
    } else {
        foreach ($map as $k => $label) {
            if ($k !== '' && str_starts_with($norm, $k)) {
                if ($label !== $orig) {
                    $updates[] = ['id' => $id, 'from' => $orig, 'to' => $label];
                }
                continue 2;
            }
        }
        // unmapped: include as comment for manual review
        $updates[] = ['id' => $id, 'from' => $orig, 'to' => null];
    }
}

if (empty($updates)) {
    echo "No updates necessary.\n";
    exit(0);
}

$outPath = __DIR__ . '/normalize_provinces_updates.sql';
$fh = fopen($outPath, 'w');
if ($fh === false) {
    echo "Failed to open output file: $outPath\n";
    exit(1);
}

fwrite($fh, "-- SQL updates generated by scripts/generate_province_updates.php\n");
fwrite($fh, "-- Review before applying. Unmapped entries are commented out.\n\n");
fwrite($fh, "START TRANSACTION;\n\n");

foreach ($updates as $u) {
    $id = (int)$u['id'];
    $from = $u['from'];
    $to = $u['to'];
    $fromEsc = str_replace("'", "''", $from);
    if ($to === null) {
        fwrite($fh, "-- id=$id: '$fromEsc' -> [no mapping]\n");
        fwrite($fh, "-- -- REVIEW: decide target value and uncomment the UPDATE below if appropriate\n");
        fwrite($fh, "-- -- UPDATE djs SET location_province = 'Canonical Value' WHERE id = $id AND location_province = '$fromEsc';\n\n");
    } else {
        $toEsc = str_replace("'", "''", $to);
        fwrite($fh, "-- id=$id: '$fromEsc' -> '$toEsc'\n");
        fwrite($fh, "UPDATE djs SET location_province = '$toEsc' WHERE id = $id AND location_province = '$fromEsc';\n\n");
    }
}

fwrite($fh, "COMMIT;\n");
fclose($fh);

echo "Wrote " . count($updates) . " entries to $outPath\n";
echo "Review the file, then run it via your DB tool (mysql < $outPath) after backing up the DB.\n";
